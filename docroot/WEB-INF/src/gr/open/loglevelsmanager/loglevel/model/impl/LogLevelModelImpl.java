/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package gr.open.loglevelsmanager.loglevel.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import gr.open.loglevelsmanager.loglevel.model.LogLevel;
import gr.open.loglevelsmanager.loglevel.model.LogLevelModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LogLevel service. Represents a row in the &quot;loglevel_LogLevel&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link gr.open.loglevelsmanager.loglevel.model.LogLevelModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LogLevelImpl}.
 * </p>
 *
 * @author Jack A. Rider
 * @see LogLevelImpl
 * @see gr.open.loglevelsmanager.loglevel.model.LogLevel
 * @see gr.open.loglevelsmanager.loglevel.model.LogLevelModel
 * @generated
 */
public class LogLevelModelImpl extends BaseModelImpl<LogLevel>
	implements LogLevelModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a log level model instance should use the {@link gr.open.loglevelsmanager.loglevel.model.LogLevel} interface instead.
	 */
	public static final String TABLE_NAME = "loglevel_LogLevel";
	public static final Object[][] TABLE_COLUMNS = {
			{ "LogLevelId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "logLevelDescription", Types.VARCHAR },
			{ "logLevelPriority", Types.VARCHAR },
			{ "logLevelCategory", Types.VARCHAR },
			{ "logLevelScheduled", Types.BOOLEAN },
			{ "logLevelStartDate", Types.TIMESTAMP },
			{ "logLevelEndDate", Types.TIMESTAMP },
			{ "activateOnStartup", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table loglevel_LogLevel (LogLevelId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,logLevelDescription VARCHAR(75) null,logLevelPriority VARCHAR(75) null,logLevelCategory VARCHAR(75) null,logLevelScheduled BOOLEAN,logLevelStartDate DATE null,logLevelEndDate DATE null,activateOnStartup BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table loglevel_LogLevel";
	public static final String ORDER_BY_JPQL = " ORDER BY logLevel.LogLevelId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY loglevel_LogLevel.LogLevelId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.gr.open.loglevelsmanager.loglevel.model.LogLevel"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.gr.open.loglevelsmanager.loglevel.model.LogLevel"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.gr.open.loglevelsmanager.loglevel.model.LogLevel"),
			true);
	public static long ACTIVATEONSTARTUP_COLUMN_BITMASK = 1L;
	public static long COMPANYID_COLUMN_BITMASK = 2L;
	public static long GROUPID_COLUMN_BITMASK = 4L;
	public static long LOGLEVELSCHEDULED_COLUMN_BITMASK = 8L;
	public static long USERID_COLUMN_BITMASK = 16L;
	public static long LOGLEVELID_COLUMN_BITMASK = 32L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.gr.open.loglevelsmanager.loglevel.model.LogLevel"));

	public LogLevelModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _LogLevelId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLogLevelId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _LogLevelId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LogLevel.class;
	}

	@Override
	public String getModelClassName() {
		return LogLevel.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("LogLevelId", getLogLevelId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("logLevelDescription", getLogLevelDescription());
		attributes.put("logLevelPriority", getLogLevelPriority());
		attributes.put("logLevelCategory", getLogLevelCategory());
		attributes.put("logLevelScheduled", getLogLevelScheduled());
		attributes.put("logLevelStartDate", getLogLevelStartDate());
		attributes.put("logLevelEndDate", getLogLevelEndDate());
		attributes.put("activateOnStartup", getActivateOnStartup());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long LogLevelId = (Long)attributes.get("LogLevelId");

		if (LogLevelId != null) {
			setLogLevelId(LogLevelId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String logLevelDescription = (String)attributes.get(
				"logLevelDescription");

		if (logLevelDescription != null) {
			setLogLevelDescription(logLevelDescription);
		}

		String logLevelPriority = (String)attributes.get("logLevelPriority");

		if (logLevelPriority != null) {
			setLogLevelPriority(logLevelPriority);
		}

		String logLevelCategory = (String)attributes.get("logLevelCategory");

		if (logLevelCategory != null) {
			setLogLevelCategory(logLevelCategory);
		}

		Boolean logLevelScheduled = (Boolean)attributes.get("logLevelScheduled");

		if (logLevelScheduled != null) {
			setLogLevelScheduled(logLevelScheduled);
		}

		Date logLevelStartDate = (Date)attributes.get("logLevelStartDate");

		if (logLevelStartDate != null) {
			setLogLevelStartDate(logLevelStartDate);
		}

		Date logLevelEndDate = (Date)attributes.get("logLevelEndDate");

		if (logLevelEndDate != null) {
			setLogLevelEndDate(logLevelEndDate);
		}

		Boolean activateOnStartup = (Boolean)attributes.get("activateOnStartup");

		if (activateOnStartup != null) {
			setActivateOnStartup(activateOnStartup);
		}
	}

	@Override
	public long getLogLevelId() {
		return _LogLevelId;
	}

	@Override
	public void setLogLevelId(long LogLevelId) {
		_LogLevelId = LogLevelId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getLogLevelDescription() {
		if (_logLevelDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _logLevelDescription;
		}
	}

	@Override
	public void setLogLevelDescription(String logLevelDescription) {
		_logLevelDescription = logLevelDescription;
	}

	@Override
	public String getLogLevelPriority() {
		if (_logLevelPriority == null) {
			return StringPool.BLANK;
		}
		else {
			return _logLevelPriority;
		}
	}

	@Override
	public void setLogLevelPriority(String logLevelPriority) {
		_logLevelPriority = logLevelPriority;
	}

	@Override
	public String getLogLevelCategory() {
		if (_logLevelCategory == null) {
			return StringPool.BLANK;
		}
		else {
			return _logLevelCategory;
		}
	}

	@Override
	public void setLogLevelCategory(String logLevelCategory) {
		_logLevelCategory = logLevelCategory;
	}

	@Override
	public boolean getLogLevelScheduled() {
		return _logLevelScheduled;
	}

	@Override
	public boolean isLogLevelScheduled() {
		return _logLevelScheduled;
	}

	@Override
	public void setLogLevelScheduled(boolean logLevelScheduled) {
		_columnBitmask |= LOGLEVELSCHEDULED_COLUMN_BITMASK;

		if (!_setOriginalLogLevelScheduled) {
			_setOriginalLogLevelScheduled = true;

			_originalLogLevelScheduled = _logLevelScheduled;
		}

		_logLevelScheduled = logLevelScheduled;
	}

	public boolean getOriginalLogLevelScheduled() {
		return _originalLogLevelScheduled;
	}

	@Override
	public Date getLogLevelStartDate() {
		return _logLevelStartDate;
	}

	@Override
	public void setLogLevelStartDate(Date logLevelStartDate) {
		_logLevelStartDate = logLevelStartDate;
	}

	@Override
	public Date getLogLevelEndDate() {
		return _logLevelEndDate;
	}

	@Override
	public void setLogLevelEndDate(Date logLevelEndDate) {
		_logLevelEndDate = logLevelEndDate;
	}

	@Override
	public boolean getActivateOnStartup() {
		return _activateOnStartup;
	}

	@Override
	public boolean isActivateOnStartup() {
		return _activateOnStartup;
	}

	@Override
	public void setActivateOnStartup(boolean activateOnStartup) {
		_columnBitmask |= ACTIVATEONSTARTUP_COLUMN_BITMASK;

		if (!_setOriginalActivateOnStartup) {
			_setOriginalActivateOnStartup = true;

			_originalActivateOnStartup = _activateOnStartup;
		}

		_activateOnStartup = activateOnStartup;
	}

	public boolean getOriginalActivateOnStartup() {
		return _originalActivateOnStartup;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			LogLevel.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LogLevel toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LogLevel)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LogLevelImpl logLevelImpl = new LogLevelImpl();

		logLevelImpl.setLogLevelId(getLogLevelId());
		logLevelImpl.setCompanyId(getCompanyId());
		logLevelImpl.setGroupId(getGroupId());
		logLevelImpl.setUserId(getUserId());
		logLevelImpl.setUserName(getUserName());
		logLevelImpl.setCreateDate(getCreateDate());
		logLevelImpl.setModifiedDate(getModifiedDate());
		logLevelImpl.setLogLevelDescription(getLogLevelDescription());
		logLevelImpl.setLogLevelPriority(getLogLevelPriority());
		logLevelImpl.setLogLevelCategory(getLogLevelCategory());
		logLevelImpl.setLogLevelScheduled(getLogLevelScheduled());
		logLevelImpl.setLogLevelStartDate(getLogLevelStartDate());
		logLevelImpl.setLogLevelEndDate(getLogLevelEndDate());
		logLevelImpl.setActivateOnStartup(getActivateOnStartup());

		logLevelImpl.resetOriginalValues();

		return logLevelImpl;
	}

	@Override
	public int compareTo(LogLevel logLevel) {
		long primaryKey = logLevel.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LogLevel)) {
			return false;
		}

		LogLevel logLevel = (LogLevel)obj;

		long primaryKey = logLevel.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LogLevelModelImpl logLevelModelImpl = this;

		logLevelModelImpl._originalCompanyId = logLevelModelImpl._companyId;

		logLevelModelImpl._setOriginalCompanyId = false;

		logLevelModelImpl._originalGroupId = logLevelModelImpl._groupId;

		logLevelModelImpl._setOriginalGroupId = false;

		logLevelModelImpl._originalUserId = logLevelModelImpl._userId;

		logLevelModelImpl._setOriginalUserId = false;

		logLevelModelImpl._originalLogLevelScheduled = logLevelModelImpl._logLevelScheduled;

		logLevelModelImpl._setOriginalLogLevelScheduled = false;

		logLevelModelImpl._originalActivateOnStartup = logLevelModelImpl._activateOnStartup;

		logLevelModelImpl._setOriginalActivateOnStartup = false;

		logLevelModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LogLevel> toCacheModel() {
		LogLevelCacheModel logLevelCacheModel = new LogLevelCacheModel();

		logLevelCacheModel.LogLevelId = getLogLevelId();

		logLevelCacheModel.companyId = getCompanyId();

		logLevelCacheModel.groupId = getGroupId();

		logLevelCacheModel.userId = getUserId();

		logLevelCacheModel.userName = getUserName();

		String userName = logLevelCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			logLevelCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			logLevelCacheModel.createDate = createDate.getTime();
		}
		else {
			logLevelCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			logLevelCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			logLevelCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		logLevelCacheModel.logLevelDescription = getLogLevelDescription();

		String logLevelDescription = logLevelCacheModel.logLevelDescription;

		if ((logLevelDescription != null) &&
				(logLevelDescription.length() == 0)) {
			logLevelCacheModel.logLevelDescription = null;
		}

		logLevelCacheModel.logLevelPriority = getLogLevelPriority();

		String logLevelPriority = logLevelCacheModel.logLevelPriority;

		if ((logLevelPriority != null) && (logLevelPriority.length() == 0)) {
			logLevelCacheModel.logLevelPriority = null;
		}

		logLevelCacheModel.logLevelCategory = getLogLevelCategory();

		String logLevelCategory = logLevelCacheModel.logLevelCategory;

		if ((logLevelCategory != null) && (logLevelCategory.length() == 0)) {
			logLevelCacheModel.logLevelCategory = null;
		}

		logLevelCacheModel.logLevelScheduled = getLogLevelScheduled();

		Date logLevelStartDate = getLogLevelStartDate();

		if (logLevelStartDate != null) {
			logLevelCacheModel.logLevelStartDate = logLevelStartDate.getTime();
		}
		else {
			logLevelCacheModel.logLevelStartDate = Long.MIN_VALUE;
		}

		Date logLevelEndDate = getLogLevelEndDate();

		if (logLevelEndDate != null) {
			logLevelCacheModel.logLevelEndDate = logLevelEndDate.getTime();
		}
		else {
			logLevelCacheModel.logLevelEndDate = Long.MIN_VALUE;
		}

		logLevelCacheModel.activateOnStartup = getActivateOnStartup();

		return logLevelCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{LogLevelId=");
		sb.append(getLogLevelId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", logLevelDescription=");
		sb.append(getLogLevelDescription());
		sb.append(", logLevelPriority=");
		sb.append(getLogLevelPriority());
		sb.append(", logLevelCategory=");
		sb.append(getLogLevelCategory());
		sb.append(", logLevelScheduled=");
		sb.append(getLogLevelScheduled());
		sb.append(", logLevelStartDate=");
		sb.append(getLogLevelStartDate());
		sb.append(", logLevelEndDate=");
		sb.append(getLogLevelEndDate());
		sb.append(", activateOnStartup=");
		sb.append(getActivateOnStartup());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("gr.open.loglevelsmanager.loglevel.model.LogLevel");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>LogLevelId</column-name><column-value><![CDATA[");
		sb.append(getLogLevelId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>logLevelDescription</column-name><column-value><![CDATA[");
		sb.append(getLogLevelDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>logLevelPriority</column-name><column-value><![CDATA[");
		sb.append(getLogLevelPriority());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>logLevelCategory</column-name><column-value><![CDATA[");
		sb.append(getLogLevelCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>logLevelScheduled</column-name><column-value><![CDATA[");
		sb.append(getLogLevelScheduled());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>logLevelStartDate</column-name><column-value><![CDATA[");
		sb.append(getLogLevelStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>logLevelEndDate</column-name><column-value><![CDATA[");
		sb.append(getLogLevelEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activateOnStartup</column-name><column-value><![CDATA[");
		sb.append(getActivateOnStartup());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LogLevel.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			LogLevel.class
		};
	private long _LogLevelId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _logLevelDescription;
	private String _logLevelPriority;
	private String _logLevelCategory;
	private boolean _logLevelScheduled;
	private boolean _originalLogLevelScheduled;
	private boolean _setOriginalLogLevelScheduled;
	private Date _logLevelStartDate;
	private Date _logLevelEndDate;
	private boolean _activateOnStartup;
	private boolean _originalActivateOnStartup;
	private boolean _setOriginalActivateOnStartup;
	private long _columnBitmask;
	private LogLevel _escapedModel;
}